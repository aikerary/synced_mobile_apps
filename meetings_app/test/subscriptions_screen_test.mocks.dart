// Mocks generated by Mockito 5.4.5 from annotations
// in meetings_app/test/subscriptions_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:meetings_app/features/app/controllers/event_controller.dart'
    as _i2;
import 'package:meetings_app/features/app/models/event_comment_model.dart'
    as _i4;
import 'package:meetings_app/features/app/models/event_model.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EventController].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventController extends _i1.Mock implements _i2.EventController {
  @override
  List<_i3.Event> get events =>
      (super.noSuchMethod(
            Invocation.getter(#events),
            returnValue: <_i3.Event>[],
            returnValueForMissingStub: <_i3.Event>[],
          )
          as List<_i3.Event>);

  @override
  List<_i4.EventComment> get comments =>
      (super.noSuchMethod(
            Invocation.getter(#comments),
            returnValue: <_i4.EventComment>[],
            returnValueForMissingStub: <_i4.EventComment>[],
          )
          as List<_i4.EventComment>);

  @override
  Set<int> get subscribedEventIds =>
      (super.noSuchMethod(
            Invocation.getter(#subscribedEventIds),
            returnValue: <int>{},
            returnValueForMissingStub: <int>{},
          )
          as Set<int>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasUserCommentedEvent(int? eventId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#hasUserCommentedEvent, [eventId, userId]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool hasCommentedEvent(int? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#hasCommentedEvent, [eventId]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isSubscribed(int? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#isSubscribed, [eventId]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Future<void> loadEvents() =>
      (super.noSuchMethod(
            Invocation.method(#loadEvents, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i3.Event? getEventById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getEventById, [id]),
            returnValueForMissingStub: null,
          )
          as _i3.Event?);

  @override
  List<_i3.Event> getPastEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getPastEvents, []),
            returnValue: <_i3.Event>[],
            returnValueForMissingStub: <_i3.Event>[],
          )
          as List<_i3.Event>);

  @override
  List<_i3.Event> getUpcomingEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingEvents, []),
            returnValue: <_i3.Event>[],
            returnValueForMissingStub: <_i3.Event>[],
          )
          as List<_i3.Event>);

  @override
  List<_i3.Event> getSubscribedEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getSubscribedEvents, []),
            returnValue: <_i3.Event>[],
            returnValueForMissingStub: <_i3.Event>[],
          )
          as List<_i3.Event>);

  @override
  List<_i3.Event> getUpcomingSubscribedEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingSubscribedEvents, []),
            returnValue: <_i3.Event>[],
            returnValueForMissingStub: <_i3.Event>[],
          )
          as List<_i3.Event>);

  @override
  List<_i3.Event> getPastSubscribedEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getPastSubscribedEvents, []),
            returnValue: <_i3.Event>[],
            returnValueForMissingStub: <_i3.Event>[],
          )
          as List<_i3.Event>);

  @override
  List<_i4.EventComment> getCommentsForEvent(int? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#getCommentsForEvent, [eventId]),
            returnValue: <_i4.EventComment>[],
            returnValueForMissingStub: <_i4.EventComment>[],
          )
          as List<_i4.EventComment>);

  @override
  double getAverageRatingForEvent(int? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#getAverageRatingForEvent, [eventId]),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  void updateRating(int? eventId, double? newRating) => super.noSuchMethod(
    Invocation.method(#updateRating, [eventId, newRating]),
    returnValueForMissingStub: null,
  );

  @override
  bool subscribeToEvent(int? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToEvent, [eventId]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool unsubscribeFromEvent(int? eventId) =>
      (super.noSuchMethod(
            Invocation.method(#unsubscribeFromEvent, [eventId]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addComment({
    required int? eventId,
    required String? content,
    required int? rating,
    required bool? isAnonymous,
    String? userId,
  }) => super.noSuchMethod(
    Invocation.method(#addComment, [], {
      #eventId: eventId,
      #content: content,
      #rating: rating,
      #isAnonymous: isAnonymous,
      #userId: userId,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void removeComment(String? commentId) => super.noSuchMethod(
    Invocation.method(#removeComment, [commentId]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
