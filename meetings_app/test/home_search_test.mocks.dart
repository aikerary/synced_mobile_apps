// Mocks generated by Mockito 5.4.5 from annotations
// in meetings_app/test/home_search_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/src/widgets/navigator.dart' as _i6;
import 'package:meetings_app/features/app/models/event_model.dart' as _i4;
import 'package:meetings_app/features/app/models/track_model.dart' as _i5;
import 'package:meetings_app/features/app/repository/event_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EventRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventRepository extends _i1.Mock implements _i2.EventRepository {
  @override
  _i3.Future<List<_i4.Event>> loadDummyEvents() =>
      (super.noSuchMethod(
            Invocation.method(#loadDummyEvents, []),
            returnValue: _i3.Future<List<_i4.Event>>.value(<_i4.Event>[]),
            returnValueForMissingStub: _i3.Future<List<_i4.Event>>.value(
              <_i4.Event>[],
            ),
          )
          as _i3.Future<List<_i4.Event>>);

  @override
  _i3.Future<List<_i5.Track>> loadDummyTracks() =>
      (super.noSuchMethod(
            Invocation.method(#loadDummyTracks, []),
            returnValue: _i3.Future<List<_i5.Track>>.value(<_i5.Track>[]),
            returnValueForMissingStub: _i3.Future<List<_i5.Track>>.value(
              <_i5.Track>[],
            ),
          )
          as _i3.Future<List<_i5.Track>>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i6.NavigatorObserver {
  @override
  void didPush(_i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPush, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(_i6.Route<dynamic>? route, _i6.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didRemove, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didReplace({
    _i6.Route<dynamic>? newRoute,
    _i6.Route<dynamic>? oldRoute,
  }) => super.noSuchMethod(
    Invocation.method(#didReplace, [], {
      #newRoute: newRoute,
      #oldRoute: oldRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeTop(
    _i6.Route<dynamic>? topRoute,
    _i6.Route<dynamic>? previousTopRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );
}
